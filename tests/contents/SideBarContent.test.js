import React from "react";
import SideBarContent from "../../src/contents/SideBarContent";
import { MemoryRouter } from "react-router-dom";
import { act, render, waitFor, screen } from "@testing-library/react";

function mockNavMaker(_routes) {
  return [
    { path: "/route1", label: "Route 1" },
    { path: "/route2", label: "Route 2" },
  ];
}

jest.mock("../../src/helpers/Util", () => ({
  ...jest.requireActual("../../src/helpers/Util"),
  navMaker: mockNavMaker,
}));

var container = null;

describe("SideBarContent component", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe("renders correctly on small or bigger viewports", () => {
    beforeEach(() => {
      container = render(
        <MemoryRouter>
          <SideBarContent />
        </MemoryRouter>
      ).container;
    });

    it("showing the sidebar box", () => {
      const sidebarBox = container.querySelector("[aria-label='sidebar_box']");
      expect(sidebarBox).toBeInTheDocument();
    });

    it("showing the sm-drawer", () => {
      const drawerSm = container.querySelector(
        "[identifier='side-bar-content-sm-drawer']"
      );
      expect(drawerSm).toBeInTheDocument();
    });

    it("not showing the xs-drawer", () => {
      const drawerXs = container.querySelector(
        "[identifier='side-bar-content-xs-drawer']"
      );
      expect(drawerXs).toBeNull();
    });

    it("showing the navigation buttons generated by navMaker utility", () => {
      const route1Item = container.querySelector(
        "[identifier='side-bar-button-0']"
      );
      expect(route1Item).toBeInTheDocument();
      expect(route1Item.textContent).toContain("Route 1");

      const route2Item = container.querySelector(
        "[identifier='side-bar-button-1']"
      );
      expect(route2Item).toBeInTheDocument();
      expect(route2Item.textContent).toContain("Route 2");
    });
  });
});
